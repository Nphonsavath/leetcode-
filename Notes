217. Contains Duplicate: Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.
  IDEA: Add to hashmap/hashset to keep track of if it appeared and check

242. Valid Anagram: An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.
  IDEA: Can use hashmap to keep track of all the letters that appear, or use array and increment index of ascii value and decrement index of ascii to ensure it is at 0 or not

1. Two Sum: Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.
  IDEA: Clever trick to use hashmap to check if map contains (target number - the value at index i in for loop), if it does return both otherwise add to map

49. Group Anagrams: Given an array of strings strs, group the anagrams together. You can return the answer in any order.
  IDEA: iterate through each string in String[], create a char[] to store each letter and iterate through each character in string as an array, ascii subtraction increment, get the string of that array and if its not a keyyet add it with its value as an 
arrayList and add get that key and add string, return arrayList with map.values()

20. Valid Parentheses: Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
  IDEA: iterate through string, if open push, if not check if stack empty (that means no matching), peek at top, if the top is an open bracket and the char is a closed bracket they match and pop, if not return false. return stack.isEmpty()

125. Valid Palindrome: A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.
  IDEA: convert string to replaceAll non alphanumeric, replace space with empty and make lower, 2 pointer, check if new string is null or length 0 return true, compare L and R until cross
  IDEA: Make Character value at strings index 0 and Length -1, while pointer not crossed check if !Character.isLetterOrDigit(start)) (which means not valid char) increment index 1 and continue until both land on valid char then check if equal after calling toLower

121. Best Time to Buy and Sell Stock: You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell 
that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.
  IDEA: 2 pointers at 0 and 1, while the sell pointer (R) is not past length of array compare the price and if you are buying less than selling calculate profit and Math.max, if not put L to R and always increment R

704. Binary Search: Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.
You must write an algorithm with O(log n) runtime complexity.
  IDEA: Like a dictionary, take half and look in the other. 2 Pointer problem, start and end. while L does not pass right, find mid which is int (L+R)/2. If target > num[mid] that means it is on right to move left = mid + 1, if target < num[mid] means on left
so R = mid - 1; else return mid.

347. Top K Frequent Elements: Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.
  IDEA: Hashing. Iterate through int[] nums, put in hashmap with key (int) and value (freq). Create bucket which is List<Integer>[] with size (nums.length + 1), itereate through key in map.keySet(), get the freq and if the bucket at the freq is null add arrayList, 
  always add the key to that bucket[freq]. make result int[], iterate through desccending order of bnucket, if its not null iterate through each element in bucket.

206. Reverse Linked LIst: Given the head of a singly linked list, reverse the list, and return the reversed list. 
  IDEA: 2 pointer problem, for curr and prev. Make save head.next node, make head next node point to null sincec it is now tail, make prevHead new Head and head the head.next you saved previously. Recusrively, check if head == null or head.next == null, if not 
  call recusrive on head.next til u hit tail which is now new head, it will go back to tail.prevs node and you will make the next next element that element, and set that elements next to null

21. Merge Two Sorted Lists: You are given the heads of two sorted linked lists list1 and list2. Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.
  IDEA: Check edge cases if eiter list is empty return the other one. Create solution list, and keep track of head variable. While both lists arent null compare values, move head to smaller value and increment the node in the list and head, once one list is null
  have if to check which is emptied first and continue with thhe entirety of other list.

141. Linked List Cycle: Given head, the head of a linked list, determine if the linked list has a cycle in it. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. 
Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.
  IDEA:Remeber tortise and hare, 2xSlow = Fast, ahve 2 pointers at head. While (fast != null && fast.next != null) increment slow by 1 and fast by 2. if they meet then there is a cycle otherwise false.

238. Product of Array Except Self: Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i]. The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
You must write an algorithm that runs in O(n) time and without using the division operation.
  IDEA: use 3 arrays: prefix, postfix, solution. use initial value 1 and put in array then multiply by current value, should be slightly offset, then multiply both arrays together for solution. or multiply entire array and divide by each element if possible.

226. Invert binary tree: Given the root of a binary tree, invert the tree, and return its root.
  IDEA: Recursive. Base case if root == null return root. Call on left, call on right. it will make its way to node with left and right. make temp variable, store right, change right to left, change left to temp, return root.

104. Maximum Depth of a Binary Tree Given the root of a binary tree, return its maximum depth. A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
  IDEA: Recursion. The max depth using dfs formula is check if root == null return 0, otherwise int left = maxDepth(nodel.left) and same with right, and you will return 1 + the max of the left and right nodes.

543. Diameter of Binary Tree: Given the root of a binary tree, return the length of the diameter of the tree.The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.
The length of a path between two nodes is represented by the number of edges between them.
  IDEA: Have helper function, and global result var. usual dfs depth recursion, have max = Math.max(res, left+right) and return depth formula 1+Math.max(left, right)

100. Same Tree: Given the roots of two binary trees p and q, write a function to check if they are the same or not.
  IDEA: what makes them the same? well if they are both null they are equal, then cheeck if they are false if one is null or their values are not equal. otherwise call the recrusive function on left and right and return results &&

15: 3Sum: Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets.
  IDEA: Sort array to treat as TwoSumII. Check initial conditions null or length < 3. Have big for loop for non pivot element, check if i > 0 && nums[i] == nums[i-1] which means to find new non pivot element that isnt used before, otherwise continue 
  (aka keep trying)
  Set L to i+1, and R to typical num.length -1. iterate while L < R, get target value and check if < 0 move left in or > 0 move right in, otherwise create ArrayList and add in that order [i, l, r], increase L and while L < R and L is same as previous element L ++.  

53. Maximum Subarray: Given an integer array nums, find the sub array with the largest sum, and return its sum.
  IDEA: set max and current vars to nums[0]. iterate from i = 1 to length, your current value will either be the max of (current + nums[i] which is the next element, or if it makes it smaller to restart with the next elemnt nums[i]) then the max is math of 
(current,max)

169. Majority Element: Given an array nums of size n, return the majority element. The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.
  IDEA: use hashmap to keep track of frequency, iterate through nums, put in the valuea and its frequency using map.getOrDefault(map[i], 0) +1 and set max to the current freq (Math.max(map.get(nums[i], max));. after that, iterate through keys using mey.keySet()
  and if the value of the key == max return that solution. 
  FOLLOWUP: O(N) Time O(1) Space: first element starts as majortiy ans=nums[0] count = 1. iterate through int[] starting at 1, if ans != nums[i] decrement count. if statement (count == 0) ans = nums[i] count =1.

78. Subsets: Given an integer array nums of unique elements, return all possible subsets(the power set).The solution set must not contain duplicate subsets. Return the solution in any order.
  IDEA: create helper function with (int  i, int[] nums, currentSubsets, and solution). base case if i >= nums.length add currentSubsets to solution. currentSubsets.add(nums[i]) and call helper on i+1, remove the last element in currentSubsets, and call 
helperon i+1.

2. Add Two Numbers: You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
  IDEA: create solution and cursor initially at node. iterate while l1 || l2 exists or carry != 0. if l1 isnt empty, add that to sum and move forward. same with l2. add carry to sum. get the carry value and next ele. set next node to new node and move current.

19. Remove Nth Node From End of List: Given the head of a linked list, remove the nth node from the end of the list and return its head.
  IDEA: 2 pointer, slow and fast. Make fast n elements ahead of slow, iterate both until fast == null, so that S.next will be the elment to remove. 

1929. Concatenation of Array: Specifically, ans is the concatenation of two nums arrays.
  IDEA:  make array 2*nums.length. iterate throug and solution[i] = nums[i] as well as solution[i]+nums.length = nums[i]. boom.

703. Kth Largest Element in a Stream: Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.
Implement KthLargest class:KthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.int add(int val) Appends the integer val to the stream and returns the element representing the kth largest element in the stream.
  IDEA:  implement priority queue (min queue default in java). add all nums in int[] nums to pq. in add function add val to pq. trick, keep pq at size k so check if pq.size() > k, if so remove() (which will remove smallest element) and return pq.peek()

572. Subtree of Another Tree: Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.
A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.
  IDEA:  create dfs iterative function (checks if root/subRoot == null, return true since it went through the entire thing, check if root or subRoot == null or root.val != subroot.val return false, call on left and right, return &&) in subTree function
  check root/subRoot == false, call dfs function, return isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot)

1046. Last Stone Weight: You are given an array of integers stones where stones[i] is the weight of the ith stone. We are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones 
have weights x and y with x <= y. The result of this smash is:
If x == y, both stones are destroyed, and
If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x. At the end of the game, there is at most one stone left. Return the weight of the last remaining stone. If there are no stones left, return 0.
  IDEA: use PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder()) as max heap, add all stones to pq. while (pq.size() > 1) poll and compare stones.

215. Kth Largest Element in an Array: Given an integer array nums and an integer k, return the kth largest element in the array. Note that it is the kth largest element in the sorted order, not the kth distinct element. Can you solve it without sorting?
  IDEA: add all nums to pq (which is max heap), for loop where condition is i < k-1, so remove elements so that the one you would remove next would be kth element and return that  one

973. K Closest Points to Origin
  IDEA:  Make priority queue with your own comparator PriorityQueue<int[]> pq = new PriorityQueue<>((a,b) -> (b[0]*b[0]+b[1]*b[1] - (a[0]*a[0]+a[1]*a[1]))). Iterate through int[] points, add them to pq, check size of pq and poll if larger. make int[][] and add.

268. Missing Number
  IDEA:  use logic, since it is missing 1 number from [0, n], the correct sum will be all those added together, minus the nums array will lead to missing number

136. Single Number: Given a non-empty array of integers nums, every element appears twice except for one. Find that single one. You must implement a solution with a linear runtime complexity and use only constant extra space.
  IDEA: use hashmap, put the value in and use getOrDefault(nums[i], 0) + 1. iterate through keyset, if the keys value == 1 return that key

1299. Replace Elements with Greatest Element on Right Side: Given an array arr, replace every element in that array with the greatest element among the elements to its right, and replace the last element with -1. After doing so, return the array.
  IDEA:  iterate array backwards, store the temp variable, replace last elementw ith max initially (-1) and compute new max.

392. Is Subsequence: Given two strings s and t, return true if s is a subsequence of t, or false otherwise. A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing 
the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).
  IDEA:   2 pointer approach, s and l, while they are less than their respsective length, check if chararater at s and t are equal and move s pointer if so, always move t pointer no matter what. will return == of s pointer value and s.length()

58. Length of Last Word: Given a string s consisting of words and spaces, return the length of the last word in the string.A word is a maximal substring consisting of non-space characters only.
  IDEA:  iterate backwards through streing, if its a space it will continue through loop and return length if length > 0 since we have encountered our word, if it not a space then we begin counting our word,

344. Reverse String: Write a function that reverses a string. The input string is given as an array of characters s. You must do this by modifying the input array in-place with O(1) extra memory.
  IDEA:  2 pointer, create temp variable and swap em

83. Remove Duplicates from Sorted List: Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.
  IDEA:  check if head != null and head.next != null. if val = next val, move next over to next.next, continue. if they are different move node to next.

28. Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.
  IDEA:  create var to track correct values, iterate through haystack. if the characters match move the tracking var ++, if not move i to i-trackingVar. check if (trackingVar reached needle length, return value)

203. Remove Linked List Elementss: Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.
  IDEA:  create dummy node, and current node. check curr && curr.next, if next val == val, move it to next.next, continue. always move current to curr.next.

234. Palindrome Linked List: Given the head of a singly linked list, return true if it is a palindrome or false otherwise.
  IDEA:  add all elements to stack (LIFO). iterate through list and compare values, if doesnt equal stack.pop() return false, otherwise true

876. Middle of the Linked List: Given the head of a singly linked list, return the middle node of the linked list. If there are two middle nodes, return the second middle node.
  IDEA:  while (fast != null) {slow = slow.next;fast = fast.next.next;} just remember slow and fast pointer.

219. Contains Duplicate II: Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.
  IDEA:  basically look for dupe and check that their index <=k. Add to hashmap, iterate through and check if map contains nums[i] and the value of the key nums[i] - i (where the other dupe is) <= k else put into map.

1822. Sign of the Product of an Array: There is a function signFunc(x) that returns:
1 if x is positive.
-1 if x is negative.
0 if x is equal to 0.
You are given an integer array nums. Let product be the product of all values in the array nums. Return signFunc(product).
  IDEA:  doesnt matter number just sign, if any are 0 reutnr 0. initialize product as 1 and only do something if < 0 (-1)

1603. Design Parking System: Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.
Implement the ParkingSystem class:
ParkingSystem(int big, int medium, int small) Initializes object of the ParkingSystem class. The number of slots for each parking space are given as part of the constructor.
bool addCar(int carType) Checks whether there is a parking space of carType for the car that wants to get into the parking lot. carType can be of three kinds: big, medium, or small, which are represented by 1, 2, and 3 respectively.
A car can only park in a parking space of its carType. If there is no space available, return false, else park the car in that size space and return true.
  IDEA:  use array where big = index 1, medium = index 2, small = index 3. addCar function checks if array[carType]-- > 0;

11. Container With Most Water: You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).
Find two lines that together with the x-axis form a container, such that the container contains the most water. Return the maximum amount of water a container can store. Notice that you may not slant the container.
  IDEA:  2 pointer, amount of water is smallest height * (R-L), find max between current and currentMax. move pointer that is smallest inwards.

3. Longest Substring Without Repeating Characters: Given a string s, find the length of the longest substring without repeating characters.
  IDEA:  Sliding window (2 pointer), hashset. If hs doesnt have elment add fast (right) window char, and determine new max. Else move window in 1 by removing slow element (left).

14. Longest Common Prefix: Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string "".
  IDEA:  find shortest word. 2 loops, outer for characters and inner for each string in strs, append to string builder and return

904. Fruit Into Baskets: You are visiting a farm that has a single row of fruit trees arranged from left to right. The trees are represented by an integer array fruits where fruits[i] is the type of fruit the ith tree produces.
You want to collect as much fruit as possible. However, the owner has some strict rules that you must follow:
You only have two baskets, and each basket can only hold a single type of fruit. There is no limit on the amount of fruit each basket can hold.
Starting from any tree of your choice, you must pick exactly one fruit from every tree (including the start tree) while moving to the right. The picked fruits must fit in one of your baskets.
Once you reach a tree with fruit that cannot fit in your baskets, you must stop. Given the integer array fruits, return the maximum number of fruits you can pick.
  IDEA: use hashmap, keep track of elements and frequency, if hm.size() > 2 remove start variable element and remove if value = 0;

1380. Given an m x n matrix of distinct numbers, return all lucky numbers in the matrix in any order.A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.
  IDEA: loop through every element and find min value (grab its j index as well) iterate through the column that value was in, use flag. if you iterate through that column and there is an element bigger. set flag to false and break if you want

34. Find First and Last Position of Element in Sorted Array: Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].You must write an algorithm with O(log n) runtime complexity.
  IDEA: mentions target and log(n), binary search. continue searching while start <= end

1493. Longest Subarray of 1's After Deleting One Element: Given a binary array nums, you should delete one element from it. Return the size of the longest non-empty subarray containing only 1's in the resulting array. Return 0 if there is no such subarray.
  IDEA: keep track of zeros, able to have 1 zero. if more, start from left and move pointer until you are past a 0. Math.max(var, i-start);

35. Search Insert Position: Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
You must write an algorithm with O(log n) runtime complexity.
  IDEA: once again log(n), use binary search. return start if cant find.

278. First Bad Version:You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, 
all the versions after a bad version are also bad. Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.
You are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.
  IDEA: binary search

744. Find Smallest Letter Greater Than Target: You are given an array of characters letters that is sorted in non-decreasing order, and a character target. There are at least two different characters in letters.
Return the smallest character in letters that is lexicographically greater than target. If such a character does not exist, return the first character in letters.
  IDEA: binary search, use modulus to handle wrap around (aka return element 0 if not found)

1011. Capacity To Ship Packages Within D Days:A conveyor belt has packages that must be shipped from one port to another within days days.
The ith package on the conveyor belt has a weight of weights[i]. Each day, we load the ship with packages on the conveyor belt (in the order given by weights). We may not load more weight than the maximum weight capacity of the ship.
Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within days days. 
  IDEA: binary search, need to find if values are feasiable. lower bound is biggest packaage, upper bound is sum of all packages. keep adding packages until > mid (capacity to test) and incremeent days. checck if daysNeeded > days, if so move pointers

875. Koko Eating Bananas: Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.
Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.
Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.
Return the minimum integer k such that she can eat all the bananas within h hours.
  IDEA: binary search, feasible function is hoursNeeded += Math.ceil((double)bananas/mid), 

632. Maximum Average Subarray I: You are given an integer array nums consisting of n elements, and an integer k.
Find a contiguous subarray whose length is equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10-5 will be accepted.
  IDEA: iterate through i < k, that is first sub array and first max. then iterate through rest where i+k < nums.length and remove nums[i] and add nums[i+k]

1343. Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold: Given an array of integers arr and two integers k and threshold, return the number of sub-arrays of size k and average greater than or equal to threshold.
  IDEA: iterate through i< k, check condition. iterate through rest i+k < arr.length, check. 

1456. Maximum Number of Vowels in a Substring of Given Length: Given a string s and an integer k, return the maximum number of vowel letters in any substring of s with length k.
Vowel letters in English are 'a', 'e', 'i', 'o', and 'u'.
  IDEA: Slidign window with fixed length

1876. Substrings of Size Three with Distinct Characters: A string is good if there are no repeated characters.
Given a string s​​​​​, return the number of good substrings of length three in s​​​​​​. Note that if there are multiple occurrences of the same substring, every occurrence should be counted. A substring is a contiguous sequence of characters in a string.
  IDEA: create function to check is valid, iterate through i+3 <= s.length(), create String substring from (i, i+3), 

2379. You are given a 0-indexed string blocks of length n, where blocks[i] is either 'W' or 'B', representing the color of the ith block. The characters 'W' and 'B' denote the colors white and black, respectively.
You are also given an integer k, which is the desired number of consecutive black blocks.
In one operation, you can recolor a white block such that it becomes a black block.
Return the minimum number of operations needed such that there is at least one occurrence of k consecutive black blocks.
  IDEA: "consecutive" use window. fixed size of k. sliding window

1004. Max Consecutive Ones III: Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.
  IDEA: sliding window variable, R < nums.length, count zeroes and while zeroes > k keep goign until remove zeroes

1493. Longest Subarray of 1's After Deleting One Element: Given a binary array nums, you should delete one element from it. Return the size of the longest non-empty subarray containing only 1's in the resulting array. Return 0 if there is no such subarray.
  IDEA: sliding window variable, R < nums.length, count zeroes and while zeroes > 1 keep going until remove zeroes

1297. Given a string s, return the maximum number of occurrences of any substring under the following rules:
The number of unique characters in the substring must be less than or equal to maxLetters.
The substring size must be between minSize and maxSize inclusive.
  IDEA: use min size since max size will always contain the min. use constant sliding window of L = 0; R = minSize. add the substring(L, 0) to hashmap. iterate through the keySets and add each character to new hashmap, if newHashmap.size() <= maxLetters compare max

1695. You are given an array of positive integers nums and want to erase a subarray containing unique elements. The score you get by erasing the subarray is equal to the sum of its elements.
Return the maximum score you can get by erasing exactly one subarray.
An array b is called to be a subarray of a if it forms a contiguous subsequence of a, that is, if it is equal to a[l],a[l+1],...,a[r] for some (l,r).
  IDEA: reading it we can see it is variable length as we want to find max value of unique elements. L = 0, R = 0. can use hashset for duplicates, if set.add(element) is true, add to set, increase currMax, and move R pointer, otherwise remove left element
  decrease currMax, and move left pointer. always calculate new max.

209. Minimum Size Subarray Sum: Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.
  IDEA: sliding window variable size, add nums[R]. check while sum >= target, calculate new windowMin and subtract nums[L].

2269. Find the K-Beauty of a Number: The k-beauty of an integer num is defined as the number of substrings of num when it is read as a string that meet the following conditions:
It has a length of k. It is a divisor of num. Given integers num and k, return the k-beauty of num.
Note: Leading zeros are allowed. 0 is not a divisor of any value. A substring is a contiguous sequence of characters in a string.
  IDEA: sliding window fixed k. convert int to stringg using String.valueOf. iterate through i+k <= num.length. create new value using Integer.parseInt(substring(i, i+k)). check validity

2090. K Radius Subarray Averages: You are given a 0-indexed array nums of n integers, and an integer k.
The k-radius average for a subarray of nums centered at some index i with the radius k is the average of all elements in nums between the indices i - k and i + k (inclusive). If there are less than k elements before or after the index i, 
then the k-radius average is -1. Build and return an array avgs of length n where avgs[i] is the k-radius average for the subarray centered at index i.
The average of x elements is the sum of the x elements divided by x, using integer division. The integer division truncates toward zero, which means losing its fractional part.
For example, the average of four elements 2, 3, 1, and 5 is (2 + 3 + 1 + 5) / 4 = 11 / 4 = 2.75, which truncates to 2
  IDEA: initialize array to default, check if radius size > array. otherwise itialize window to be kradius, and start loop at k.
