class Solution {
    public int characterReplacement(String s, int k) {
        int[] bucket = new int[26];
        int L = 0, mostFreqLetter = 0, solution = Integer.MIN_VALUE; 

        for (int R = 0; R < s.length(); R++) {
            bucket[s.charAt(R) - 'A']++;
            mostFreqLetter = Math.max(mostFreqLetter, bucket[s.charAt(R) - 'A']);

            int lettersNeedChange = (R - L + 1) - mostFreqLetter;
            if (lettersNeedChange > k) {
                bucket[s.charAt(L) - 'A']--;
                L++;
            }
            solution = Math.max(solution, R - L + 1);
        }

        return solution;
    }
}

/*
If <=k replaced chars, we accept new char at right into our window. Left stays the same, so the window grows by one
Else s[right] does not keep <=k replaced chars, so we shrink the window by increasing left. But we take right into our window anyway, thus being -1 + 1 = 0
*/
