class Solution {
    public int lengthOfLongestSubstring(String s) {
        int slow = 0, fast = 0, max =0;
        HashSet<Character> hs = new HashSet<>();

        while (fast < s.length()) {
            if (!hs.contains(s.charAt(fast))) {
                hs.add(s.charAt(fast++));
                max = Math.max(max, hs.size());
            } else {
                hs.remove(s.charAt(slow++));
            }
        }

        return max;

    }
}

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int solution = 0, max = 0;

        if (s.length() == 0) {
            return solution;
        } else if (s.length() == 1) {
            return 1;
        } 

        HashSet<Character> hs = new HashSet<>();

        for (int i = 0; i < s.length(); i++) {
            if (!hs.add(s.charAt(i))) {
                hs.clear();
                i = i - solution;
                solution = 0;
                continue;
            }
            hs.add(s.charAt(i));
            solution ++;
            max = Math.max(max, solution);
        }

        return max;
    }
}
