Recursive Implementation
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head or not head.next:
            return head
    
        newHead = self.reverseList(head.next)
        head.next.next = head
        head.next = None
    
        return newHead


Time Complexity: O(n)
Space Complexity: O(n)

------------------------------------------------------------------------------

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        prev = None
        curr = head
        while (curr):
            temp = curr.next
            curr.next = prev
            prev = curr
            curr = temp
        return prev

0 <= The length of the list <= 1000.
-1000 <= Node.val <= 1000

Time Complexity: O(n)
Space Complexity: O(1)
