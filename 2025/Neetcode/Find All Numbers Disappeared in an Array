class Solution:
    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:
        sol = []
        hs = set()
        for i in range(len(nums)):
            hs.add(nums[i])

        for i in range(1, len(nums)+1):
            if i not in hs:
                sol.append(i)

        return sol

------------------------------------------------------------------------

Optimized
class Solution:
    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:
        sol = []
        for i in range(len(nums)):
            if nums[abs(nums[i])-1] < 0:
                continue
            else:
                nums[abs(nums[i])-1] = -nums[abs(nums[i])-1]
        for i in range(len(nums)):
            if (nums[i] > 0):
                sol.append(i+1)

        return sol
n == nums.length
1 <= n <= 105
1 <= nums[i] <= n
Time Complexity: O(n)
Space Complexity: O(1) excluding returned list
