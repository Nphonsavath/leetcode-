Brute Force Approach
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        sol = []
        for i in range(len(nums)):
            product = 1
            for j in range(len(nums)):
                if i == j:
                    continue
                product *= nums[j]
            sol.append(product)
        return sol

2 <= nums.length <= 1000
-20 <= nums[i] <= 20

Time Complexity: O(n^2)
Space Complexity: O(n)

-----------------------------------------------------------------

Optimal Approach
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        L = [1] * len(nums)
        R = [1] * len(nums)

        for i in range (1, len(nums)):
            L[i] = L[i-1] * nums[i-1]

        for i in range (len(nums)-2, -1, -1):
            R[i] = R[i+1] * nums[i+1]

        sol = []

        for i in range(len(nums)):
            sol.append(R[i] * L[i])
        
        return sol

Time Complexity: O(n)
Space Complexity: O(n)
