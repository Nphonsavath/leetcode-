class Solution:
    def minWindow(self, s: str, t: str) -> str:
        sol = ""
        if (len(t) > len(s)):
            return sol
        
        hmt = {}
        for c in t:
            hmt[c] = hmt.get(c, 0) + 1
        
        l = 0
        r = 0
        
        hms = {}
        have = 0
        need = len(hmt)
        while r < len(s):
            hms[s[r]] = hms.get(s[r], 0) + 1
            if s[r] in hmt and hms[s[r]] == hmt[s[r]]:
                have+=1
            while (have == need):
                if (r - l + 1) < len(sol) or sol == "":
                    sol = s[l:r+1]
                hms[s[l]]-=1
                if (s[l] in hmt and hms[s[l]] < hmt[s[l]]):
                    have-=1
                l+=1     
            r+=1
        return sol

1 <= s.length <= 1000
1 <= t.length <= 1000
s and t consist of uppercase and lowercase English letters.

Time Complexity: O(n)
Space Complexity: O(m)
