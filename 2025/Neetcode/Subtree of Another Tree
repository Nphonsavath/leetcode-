# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:   
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:

        def dfs(root):
            if not root:
                return False
            if not subRoot:
                return True
            if sameTree(root, subRoot):
                return True
            return dfs(root.left) or dfs(root.right)

        def sameTree(root, subRoot):
            if not root and not subRoot:
                return True
            if not root or not subRoot or root.val != subRoot.val:
                return False
            return sameTree(root.left, subRoot.left) and sameTree(root.right, subRoot.right)

        return dfs(root)

0 <= The number of nodes in both trees <= 100.
-100 <= root.val, subRoot.val <= 100
Time Complexity: O(m*n)
Space Complexity: O(max(m,n))
