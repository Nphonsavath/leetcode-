# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def goodNodes(self, root: TreeNode) -> int:
        self.sol = 1
        self.stack = []

        def dfs(root):
            if not root:
                return
            if self.stack and root.val >= max(self.stack)[1]:
                self.sol+=1
            if self.stack:
                self.stack.append([root.val, max(max(self.stack)[1], root.val)])
            else:
                self.stack.append([root.val, root.val])

            dfs(root.left)
            dfs(root.right)
            self.stack.pop()
            return

        dfs(root)
        return self.sol
1 <= number of nodes in the tree <= 100
-100 <= Node.val <= 100
Time Complexity: O(n*h?) because of max(self.stack)
Space Complexity: O(n)

---------------------------------------------------------------------------------------
DFS
class Solution:
    def goodNodes(self, root: TreeNode) -> int:

        def dfs(root, currMax):
            if not root:
                return 0
            res = 1 if root.val >= currMax else 0
            currMax = max(currMax, root.val)
            res += dfs(root.left, currMax)
            res += dfs(root.right, currMax)
            return res

        return dfs(root, root.val)
Time Complexity: O(n)
Space Complexity: O(n)

---------------------------------------------------------------------------------------
BFS
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def goodNodes(self, root: TreeNode) -> int:
        queue = deque([[root, root.val]])
        sol = 1

        while queue:
            curr, currMax = queue.popleft()
            if curr.left:
                if (curr.left.val >= currMax):
                    sol += 1
                queue.append([curr.left, max(curr.left.val, currMax)])
            if curr.right:
                if (curr.right.val >= currMax):
                    sol += 1
                queue.append([curr.right, max(curr.right.val, currMax)])

        return sol
Time Complexity: O(n)
Space Complexity: O(n)
