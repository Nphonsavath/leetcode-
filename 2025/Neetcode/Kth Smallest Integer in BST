Min Heap
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
from heapq import heappush, heappop

class Solution:
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
        heap = []
        queue = deque([root])

        while queue:
            node = queue.popleft()
            heappush(heap, node.val)
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)
        return heapq.nsmallest(k, heap)[-1]
Time Complexity: O(n log n) 
Space Complexity: O(n)

-------------------------------------------------------------------------
Iterative DFS
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
        arr = []

        def dfs(node):
            if not node:
                return
            
            dfs(node.left)
            arr.append(node.val)
            dfs(node.right)
        
        dfs(root)
        return arr[k - 1]
Time Complexity: O(n) 
Space Complexity: O(n)
