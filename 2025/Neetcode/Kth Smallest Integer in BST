Min Heap
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
from heapq import heappush, heappop

class Solution:
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
        heap = []
        queue = deque([root])

        while queue:
            node = queue.popleft()
            heappush(heap, node.val)
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)
        return heapq.nsmallest(k, heap)[-1]
Time Complexity: O(n log n) 
Space Complexity: O(n)

-------------------------------------------------------------------------
Iterative DFS
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:

        stack = []

        while root or stack:
            while root:
                stack.append(root)
                root = root.left

            root = stack.pop()
            k -= 1
            if k == 0:
                return root.val
            root = root.right
        
        return -1
Time Complexity: O(n) 
Space Complexity: O(n)

--------------------------------------------------------------------------
Recursive DFS
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
        self.remaining = k
        self.sol = root.val

        def dfs(root):
            if not root:
                return

            dfs(root.left)
            self.remaining-=1
            if (self.remaining == 0):
                self.sol = root.val
                return
            dfs(root.right)
        
        dfs(root)
        return self.sol
Time Complexity: O(n) 
Space Complexity: O(n)

Follow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?
1. At current node:
    left_size = number of nodes in left subtree
2. If k == left_size + 1:
       → return current node
3. If k <= left_size:
       → recurse into left subtree
4. If k > left_size + 1:
       → recurse into right subtree with k - (left_size + 1)
