# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if p.val > q.val:
            p, q = q, p

        curr = root
        while True:
            if p.val <= curr.val <= q.val:
                return curr
            elif curr.val < p.val:
                curr = curr.right
            elif curr.val > q.val:
                curr = curr.left
The number of nodes in the tree is in the range [2, 105].
-109 <= Node.val <= 109
All Node.val are unique.
p != q
p and q will exist in the BST.
Time Complexity: O(h)
Space Complexity: O(1)
