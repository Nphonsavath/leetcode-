BFS Reverse Level
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return []
        
        queue = deque([root])
        sol = []

        while queue:
            level = []
            for _ in range(len(queue)):
                node = queue.popleft()
                level.append(node.val)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            sol.append(level[-1])
        
        return sol
0 <= number of nodes in the tree <= 100
-100 <= Node.val <= 100
Time Complexity: O(n)
Space Complexity: O(width) + O(max level k)
'''

from collections import deque
if not root:
    return
queue = deque([root])

sol = []

while queue:
    level = []
    for i in range(len(queue)):
        node = queue.popleft()
        level.append(node)
        if node.left:
            queue.append(node.left)
        if node.right:
            queue.append(node.right)
    sol.append(level[-1])

return sol

root = [1,2,3]
level = [2, 3]
queue = []
node = 3
sol = [1, 3]

root = [1,2,3,4,5,6]
level = [4,5,6]
queue = []
node = 6
sol = [1,3,6]
'''
