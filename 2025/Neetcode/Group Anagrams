Sorting Approach:

class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        hs = {}
        for word in strs:
            key = ''.join(sorted(word))
            if key in hs:
                hs[key].append(word)
            else:
                hs[key] = [word]
        return list(hs.values()) 

1 <= strs.length <= 1000.
0 <= strs[i].length <= 100
strs[i] is made up of lowercase English letters.

maybe ask if strs[i] can consist of spaces
Time Complexity: O(m * log n)
Space Complexity: O(m * n)

m = number of strings
n = length of longest string

Notes: Have to do ''.join(sorted(word)), as sorted word gives ['a', 'e', 't'] instead of "aet"

------------------------------------------------------------------------------------------------

Optimal Approach:

class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        sol = defaultdict(list)
        for words in strs:
            freq = [0] * 26
            for c in words:
                freq[ord(c) - ord('a')] += 1
            sol[tuple(freq)].append(words)
        return list(sol.values())

Time Complexity: O(n * m)
Space Complexity:
  O(m) extra space
  O(m*n) output

Notes: Need to convert freq list to tuple, so it can be hashable in dict sol
