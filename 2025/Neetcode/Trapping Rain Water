class Solution:
    def trap(self, height: List[int]) -> int:
        sol = 0
        for i in range(len(height)):
            leftMax = height[i]
            rightMax = height[i]

            for j in range(i):
                leftMax = max(leftMax, height[j])

            for j in range(i + 1, len(height)):
                rightMax = max(rightMax, height[j])
            
            sol += min(leftMax, rightMax) - height[i]
        return sol

1 <= height.length <= 1000
0 <= height[i] <= 1000

Time Complexity: O(n^2)
Space Complexity: O(1)

------------------------------------------------------
Two Pointer
class Solution:
    def trap(self, height: List[int]) -> int:
        sol = 0
        l = 0
        r = len(height)-1
        leftMax = height[l]
        rightMax = height[r]

        while l < r:
            if (leftMax > rightMax):
                r-=1
                rightMax = max(rightMax, height[r])
                sol += rightMax - height[r]
            else:
                l+=1
                leftMax = max(leftMax, height[l])
                sol += leftMax - height[l]
        return sol
Time Complexity: O(n)
Space Complexity: O(1)
