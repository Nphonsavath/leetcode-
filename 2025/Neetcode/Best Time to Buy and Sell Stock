Brute Force Approach
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        solution = 0

        for i in range(len(prices)):
            for j in range(i+1, len(prices)):
                solution = max(solution, prices[j] - prices[i])

        return solution

1 <= prices.length <= 100
0 <= prices[i] <= 100

Time Complexity: O(n^2)
Space Complexity: O(1)

-----------------------------------------------------------------
Two Pointer Approach
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        solution = 0

        l = 0
        r = 0

        while r < len(prices):
            if(prices[r] < prices[l]):
                l = r
            else:
                solution = max(solution, prices[r]-prices[l])
            r+=1


        return solution
Time Complexity: O(n)
Space Complexity: O(1)
