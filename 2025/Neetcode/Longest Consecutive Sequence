Brute Force Approach
class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        if len(nums) == 0:
            return 0
        elif len(nums) == 1:
            return 1
        
        duplicate = nums[:]
        duplicate.sort()

        solution = 1
        currLongest = 1

        for i in range(1, len(duplicate)):
            if (duplicate[i] == duplicate[i-1]):
                continue
            if (duplicate[i] == duplicate[i-1]+1):
                currLongest+=1
            else:
                currLongest = 1
            if (currLongest > solution):
                solution = currLongest
        
        return solution

0 <= nums.length <= 1000
-10^9 <= nums[i] <= 10^9

do duplicates matter?
Time Complexity: O(n log n) due to calling .sort (timsort)
Space Complexity: O(n) for creating duplicate list

----------------------------------------------------------

Optimal Approach
class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        solution = 0
        hs = set(nums)
        
        for num in hs:
            if num-1 not in hs:
                currLongest = 1
                while num+1 in hs:
                    currLongest+=1
                    num+=1
                solution = max(solution, currLongest)
        return solution

Time Complexity: O(n)
Space Complexity: O(n)
