Brute Force Solution:

class Solution:
  def twoSum(self, nums: List[int], target: int) -> List[int]:
    for i in range(len(nums)):
      for j in range(i+1, len(nums)):
        if (nums[i] + nums[j] == target):
          return [i, j]
    return []

2 <= nums.length <= 1000
-10,000,000 <= nums[i] <= 10,000,000
-10,000,000 <= target <= 10,000,000
You may assume that every input has exactly one pair of indices i and j that satisfy the condition.
Return the answer with the smaller index first.

you specify that every input has exactly one pair of indicies i and j that satisfy solution, just to clarify that removes any doubts about
  -returning multiple pairs, 
  -handles cases with duplicates
  -there won't be a no pair

based on the quesiton constraints, there will always be atleast 2 elements in which that would be the pair
there will be negative values in nums, and target may be negative as well

Time Complexity: O(n^2)
Space Complexity: O(1)

-----------------------------------------------------------------------------------------------------------------------------------------------

Optimal Solution:

class Solution:
    def twoSum(self, nums: int, target: int) -> List[int]:
        hs = {}
        for i in range(len(nums)):
            if (target - nums[i]) in hs:
                return [hs.get(target - nums[i]), i]
            hs[nums[i]] = i
        return []

Time Complexity: O(n)
Space Complexity: O(n)
