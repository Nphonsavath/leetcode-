Brute Force Approach
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                if matrix[i][j] == target:
                    return True
        return False

m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-10000 <= matrix[i][j], target <= 10000

Time Complexity: O(m*n)
Space Complexity: O(1)

----------------------------------------------------------------------------

Binary Search Approach
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        l = 0
        r = len(matrix)-1

        while l <= r:
            mid = l + (r-l)//2
            if (matrix[mid][0]) > target:
                r = mid - 1
            else:
                l2 = 0
                r2 = len(matrix[mid])-1
                while (l2 <= r2):
                    mid2 = l2 + (r2-l2)//2
                    if (matrix[mid][mid2]) == target:
                        return True
                    elif (matrix[mid][mid2]) > target:
                        r2 = mid2 - 1
                    else:
                        l2 = mid2 + 1
                l = mid + 1
        return False

Time Complexity: O(log m + log n) = O(log(m*n))
Space Complexity: O(1)
