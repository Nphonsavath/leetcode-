Brute Force Approach
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        sol = 0
        for i in range(len(s)):
            hs = set()
            for j in range(i, len(s)):
                if s[j] not in hs:
                    hs.add(s[j])
                else:
                    break
            sol = max(sol, len(hs))
        return sol

Time Complexity: O(n*m)
Space Complexity: O(m)

------------------------------------------------------

Set Approach
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        sol = 0
        hs = set()
        l = 0
        r = 0
        

        while r < len(s):
            if s[r] not in hs:
                hs.add(s[r])
            else:
                while s[r] in hs:
                    hs.remove(s[l])
                    l+=1
                hs.add(s[r])
            sol = max(sol, r-l+1)
            r+=1

        return sol
0 <= s.length <= 1000
s may consist of printable ASCII characters.
Time Complexity: O(n)
Space Comlexity: O(m) where m is unique characters in window

------------------------------------------------------

Hashmap Approach
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        hm = {}
        l = 0
        sol = 0
        for c in s:
            while c in hm:
                hm[s[l]] -= 1
                if (hm[s[l]] == 0):
                    del hm[s[l]]
                l+=1
            hm[c] = hm.get(c, 0) + 1
            sol = max(sol, len(hm))
        return sol

Time Complexity: O(n*m)
Space Compleity: O(m)
