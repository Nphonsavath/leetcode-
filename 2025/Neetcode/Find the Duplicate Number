class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        slow = 0
        fast = 0
        while True:
            slow = nums[slow]
            fast = nums[nums[fast]]
            if (slow == fast):
                break
        
        slow2 = 0
        while True:
            slow2 = nums[slow2]
            slow = nums[slow]
            if (slow2 == slow):
                return slow

Follow-up: Can you solve the problem without modifying the array nums and using O(1) extra space?
Constraints:
1 <= n <= 10000
nums.length == n + 1
1 <= nums[i] <= n

Time Complexity: O(n)
Space Complexity: O(1)

Let’s say:
L is the length from start to the cycle entrance.
C is the length of the cycle.
x is the distance from the cycle entrance to the point where slow and fast meet.

By the time they meet:
slow has gone L + x steps.
fast has gone L + x + k*C steps (for some k ≥ 1, because fast laps slow in the cycle).
Because fast moves 2x:

2(L + x) = L + x + kC
=> L + x = kC
=> L = kC - x
