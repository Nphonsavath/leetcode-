Recursive DFS Solution
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0

        left = self.maxDepth(root.left)
        right = self.maxDepth(root.right)
        return 1 + max(left, right)

0 <= The number of nodes in the tree <= 100.
-100 <= Node.val <= 100
Time Complexity: O(n)
Space Complexity: O(n)

--------------------------------------------------------------
BFS Solution
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        depth = 0
        if not root:
            return depth

        queue = deque([root])
        
        
        while queue:
            for i in range(len(queue)):
                node = queue.popleft()
                if (node.left):
                    queue.append(node.left)
                if (node.right):
                    queue.append(node.right)
            depth += 1
        return depth

Time Complexity: O(n)
Space Complexity: O(n)

--------------------------------------------------------------------
Iterative DFS
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        stack = [[root, 1]]
        maxD = 0

        while stack:
            node, depth = stack.pop()
            if node:
                maxD = max(depth, maxD)
                stack.append([node.left, depth+1])
                stack.append([node.right, depth+1])
        return maxD
Time Complexity: O(n)
Space Complexity: O(n)
